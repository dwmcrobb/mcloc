#----------------------------------------------------------------------------
#  Scanner configurations.
#
#  We have a fixed set of scanners, where each scanner handles a particular
#  comment syntax.  The list of scanners can be seen by running mcloc(1)
#  with no arguments.
#
#  For each scanner, we can configure a list of languages handled by the
#  scanner.  This allows some languages to be added with configuration alone
#  (no new code).
#
#  For each language, we can configure which files will be recognized as
#  source for that language, by file extension or regular expression.
#  NOTE: you must be very careful with matching by regular expression,
#  since there is no mechanism to resolve conflicts (multiple regular
#  expressions matching the same file)!
#----------------------------------------------------------------------------
Scanners {

  #--------------------------------------------------------------------------
  # Ada scanner.
  #--------------------------------------------------------------------------
  "Ada" {
    Languages {
      "Ada" { Extensions { ".adb", ".ads" } }
    }
  }

  #--------------------------------------------------------------------------
  # Clojure scanner.
  #--------------------------------------------------------------------------
  "Clojure" {
    Languages {
      "Clojure" { Extensions { ".clj", ".cljc", ".cljs", ".edn" } }
    }
  }

  #--------------------------------------------------------------------------
  # Cmake scanner.
  #--------------------------------------------------------------------------
  "Cmake" {
    Languages {
      "Cmake" { Extensions { ".cmake" }
                Expressions { "CMakeLists.txt" } }
    }
  }
  
  #--------------------------------------------------------------------------
  # Our 'Cpp' scanner can be used on source files that use C99/C++
  # comments.  This is a fairly long list of languages.
  #--------------------------------------------------------------------------
  "Cpp" {
    Languages {
      "bison" { Extensions { ".y", ".yy" } }
      "C" { Extensions { ".c", ".h" } }
      "C++" { Extensions { ".cc", ".cpp", ".cxx", ".hh", ".hpp", ".hxx" } }
      "C#" { Extensions { ".cs" } }
      "Dart" { Extensions { ".dart" } }
      "Go" { Extensions { ".go" } }
      "Groovy" { Extensions { ".groovy", ".gvy", ".gy", ".gsh" } }
      "IDL" { Extensions { ".idl" } }
      "Java" { Extensions { ".java" } }
      "JavaScript" { Extensions { ".js", ".jsx" } }
      "Objective-C" { Extensions { ".m", ".mm", ".M" } }
      "PHP" { Extensions { ".php" } }
      "protobuf" { Extensions { ".proto" } }
      "QML" { Extensions { ".qml" } }
      "Rust" { Extensions { ".rs" } }
      "Scala" { Extensions { ".sc", ".scala" } }
      "Swift" { Extensions { ".swift" } }
      "TypeScript" { Extensions { ".ts", ".tsx" } }
    }
  }

  #--------------------------------------------------------------------------
  # Our CSS scanner.  CSS only allows C89-style comments.
  #--------------------------------------------------------------------------
  "CSS" {
    Languages {
      "CSS" { Extensions { ".css" } }
    }
  }

  #--------------------------------------------------------------------------
  # D scanner.
  #--------------------------------------------------------------------------
  "D" {
    Languages {
      "D" { Extensions { ".d" } }
    }
  }
                  
  #--------------------------------------------------------------------------
  # Erlang scanner.
  #--------------------------------------------------------------------------
  "Erlang" {
    Languages {
      "Erlang" { Extensions { ".erl", ".hrl" } }
    }
  }

  #--------------------------------------------------------------------------
  # flex scanner.
  #--------------------------------------------------------------------------
  "Flex" {
    Languages {
      "flex" { Extensions { ".l", ".lex", ".ll" } }
    }
  }

  #--------------------------------------------------------------------------
  # Fortran scanner.
  #--------------------------------------------------------------------------
  "Fortran" {
    Languages {
      "Fortran" { Extensions { ".f90", ".f95", ".f03", ".for", ".f" } }
    }
  }
  
  #--------------------------------------------------------------------------
  # Haskell scanner.
  #--------------------------------------------------------------------------
  "Haskell" {
    Languages {
      "Haskell" { Extensions { ".hs", ".lhs" } }
    }
  }

  #--------------------------------------------------------------------------
  # HTML scanner.  Used for languages with comments of the form
  # <!-- comment -->
  #--------------------------------------------------------------------------
  "HTML" {
    Languages {
      "HTML" { Extensions { ".html", ".htm" } }
      "QtRc" { Extensions { ".qrc" } }
      "QtUi" { Extensions { ".ui" } }
      "XML" { Extensions { ".xml" } }
    }
  }

  #--------------------------------------------------------------------------
  # Julia scanner.
  #--------------------------------------------------------------------------
  "Julia" {
    Languages {
      "Julia" { Extensions { ".jl" } }
    }
  }
               
  #--------------------------------------------------------------------------
  # Kotlin comments are similar to C++, but block comments may be nested.
  # Not well-tested.
  #--------------------------------------------------------------------------
  "Kotlin" {
    Languages {
      "Kotlin" { Extensions { ".kt", ".kts" } }
    }
  }

  #--------------------------------------------------------------------------
  # Lisp comments start with ';' and continue to the end of the line.
  #--------------------------------------------------------------------------
  "Lisp" {
    Languages {
      "Lisp" { Extensions { ".el", ".lisp", ".lsp", ".cl", ".jl" } }
      "Scheme" { Extensions { ".scm", ".ss" } }
      "Assembly" { Extensions { ".asm", ".nasm" } }
    }
  }

  #--------------------------------------------------------------------------
  # Lua comments start with '--' and continue to the end of the line, or
  # start with '--[[' and end with ']]'.  I currently don't handle the
  # nesting form (e.g. '--[===[' to '--]===]').  Lua is kind of a mess
  # from the perspective of comment syntax and since I don't use it, I
  # haven't made the time to improve the scanning of Lua.
  #--------------------------------------------------------------------------
  "Lua" {
    Languages {
      "Lua" { Extensions { ".lua" } }
    }
  }
  
  #--------------------------------------------------------------------------
  # Handle m4 files.  Note that We only count non-echoing comments (dnl ...)
  # as comments.  Echoing comments are counted as code.
  #--------------------------------------------------------------------------
  "m4" {
    Languages {
      "m4" { Extensions { ".ac", ".m4" } }
    }
  }

  #--------------------------------------------------------------------------
  # Manpage source scanner.
  #--------------------------------------------------------------------------
  "Manpage" {
    Languages {
      "man" { Extensions { ".man" }
              Expressions { ".+\.[1-9]" } }
    }
  }

  #--------------------------------------------------------------------------
  # Handles languages with no comments (i.e. every non-empty line of source
  # is counted as code).
  #--------------------------------------------------------------------------
  "NoComments" {
    Languages {
      "JSON" { Extensions { ".json" } }
    }
  }

  #--------------------------------------------------------------------------
  # Perl scanner.
  #--------------------------------------------------------------------------
  "Perl" {
      Languages {
          "Perl" { Extensions { ".pl", ".PL" } }
      }
  }

  #--------------------------------------------------------------------------
  # Prolog scanner.  Disabled because the typical filename extensions
  # conflict with Perl and Qt project files.
  #--------------------------------------------------------------------------
  # "Prolog" {
  #   Languages {
  #     "Prolog" { Extensions { ".pl", ".pro" } }
  #   }
  # }

  #--------------------------------------------------------------------------
  # Python scanner.
  #--------------------------------------------------------------------------
  "Python" {
    Languages {
      "Python" { Extensions { ".py" } }
    }
  }

  #--------------------------------------------------------------------------
  # Ruby scanner.
  #--------------------------------------------------------------------------
  "Ruby" {
    Languages {
      "Ruby" { Extensions { ".rb" } }
    }
  }

  #--------------------------------------------------------------------------
  # Handles languages with comments that start with # and continue to the
  # end of the line.
  #--------------------------------------------------------------------------
  "Shell" {
    Languages {
      "R" { Extensions { ".r" } }
      "Shell" { Extensions { ".sh" }
                Expressions { ".+\-sh" } }
      "TOML" { Extensions { ".toml" } }
      # match 'Makefile' as filename.  No extensions.
      "Make" { Expressions { "Makefile" } }
      "awk" { Extensions { ".awk" } }
      "sed" { Extensions { ".sed" } }
      "YAML" { Extensions { ".yaml" } }
    }
  }

  #--------------------------------------------------------------------------
  # SQL scanner.
  #--------------------------------------------------------------------------
  "SQL" {
      Languages {
          "SQL" { Extensions { ".sql" } }
      }
  }
               
  #--------------------------------------------------------------------------
  # Handles languages with comments that start with % and continue to the
  # end of the line.
  #--------------------------------------------------------------------------
  "TeX" {
    Languages {
      "TeX" { Extensions { ".tex", ".sty" } }
    }
  }
  
}

